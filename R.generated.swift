// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 75 images.
  struct image {
    /// Image `bg5`.
    static let bg5 = ImageResource(bundle: _R.hostingBundle, name: "bg5")
    /// Image `border_`.
    static let border_ = ImageResource(bundle: _R.hostingBundle, name: "border_")
    /// Image `btn_back_blue_nor`.
    static let btn_back_blue_nor = ImageResource(bundle: _R.hostingBundle, name: "btn_back_blue_nor")
    /// Image `btn_back_blue_sel`.
    static let btn_back_blue_sel = ImageResource(bundle: _R.hostingBundle, name: "btn_back_blue_sel")
    /// Image `btn_back_white_nor`.
    static let btn_back_white_nor = ImageResource(bundle: _R.hostingBundle, name: "btn_back_white_nor")
    /// Image `btn_back_white_sel`.
    static let btn_back_white_sel = ImageResource(bundle: _R.hostingBundle, name: "btn_back_white_sel")
    /// Image `btn_bg_fill_down`.
    static let btn_bg_fill_down = ImageResource(bundle: _R.hostingBundle, name: "btn_bg_fill_down")
    /// Image `btn_bg_fill_nor`.
    static let btn_bg_fill_nor = ImageResource(bundle: _R.hostingBundle, name: "btn_bg_fill_nor")
    /// Image `btn_blue_delete_down`.
    static let btn_blue_delete_down = ImageResource(bundle: _R.hostingBundle, name: "btn_blue_delete_down")
    /// Image `btn_blue_delete_nor`.
    static let btn_blue_delete_nor = ImageResource(bundle: _R.hostingBundle, name: "btn_blue_delete_nor")
    /// Image `btn_line`.
    static let btn_line = ImageResource(bundle: _R.hostingBundle, name: "btn_line")
    /// Image `btn_line_down`.
    static let btn_line_down = ImageResource(bundle: _R.hostingBundle, name: "btn_line_down")
    /// Image `btn_user_blue_multset_down`.
    static let btn_user_blue_multset_down = ImageResource(bundle: _R.hostingBundle, name: "btn_user_blue_multset_down")
    /// Image `btn_user_blue_multset_nor`.
    static let btn_user_blue_multset_nor = ImageResource(bundle: _R.hostingBundle, name: "btn_user_blue_multset_nor")
    /// Image `button_blue_bg_down`.
    static let button_blue_bg_down = ImageResource(bundle: _R.hostingBundle, name: "button_blue_bg_down")
    /// Image `button_blue_bg_normal`.
    static let button_blue_bg_normal = ImageResource(bundle: _R.hostingBundle, name: "button_blue_bg_normal")
    /// Image `car`.
    static let car = ImageResource(bundle: _R.hostingBundle, name: "car")
    /// Image `center_ico_`.
    static let center_ico_ = ImageResource(bundle: _R.hostingBundle, name: "center_ico_")
    /// Image `cesu_ico_down`.
    static let cesu_ico_down = ImageResource(bundle: _R.hostingBundle, name: "cesu_ico_down")
    /// Image `cesu_ico_nor`.
    static let cesu_ico_nor = ImageResource(bundle: _R.hostingBundle, name: "cesu_ico_nor")
    /// Image `checkmark`.
    static let checkmark = ImageResource(bundle: _R.hostingBundle, name: "checkmark")
    /// Image `cross`.
    static let cross = ImageResource(bundle: _R.hostingBundle, name: "cross")
    /// Image `fangdao_ico_down`.
    static let fangdao_ico_down = ImageResource(bundle: _R.hostingBundle, name: "fangdao_ico_down")
    /// Image `fangdao_ico_nor`.
    static let fangdao_ico_nor = ImageResource(bundle: _R.hostingBundle, name: "fangdao_ico_nor")
    /// Image `fangjie_ico_down`.
    static let fangjie_ico_down = ImageResource(bundle: _R.hostingBundle, name: "fangjie_ico_down")
    /// Image `fangjie_ico_nor`.
    static let fangjie_ico_nor = ImageResource(bundle: _R.hostingBundle, name: "fangjie_ico_nor")
    /// Image `guide1`.
    static let guide1 = ImageResource(bundle: _R.hostingBundle, name: "guide1")
    /// Image `guide2`.
    static let guide2 = ImageResource(bundle: _R.hostingBundle, name: "guide2")
    /// Image `guide3`.
    static let guide3 = ImageResource(bundle: _R.hostingBundle, name: "guide3")
    /// Image `guide4`.
    static let guide4 = ImageResource(bundle: _R.hostingBundle, name: "guide4")
    /// Image `guide4_2`.
    static let guide4_2 = ImageResource(bundle: _R.hostingBundle, name: "guide4_2")
    /// Image `jiashi_ico_down`.
    static let jiashi_ico_down = ImageResource(bundle: _R.hostingBundle, name: "jiashi_ico_down")
    /// Image `jiashi_ico_nor`.
    static let jiashi_ico_nor = ImageResource(bundle: _R.hostingBundle, name: "jiashi_ico_nor")
    /// Image `launcher`.
    static let launcher = ImageResource(bundle: _R.hostingBundle, name: "launcher")
    /// Image `line_`.
    static let line_ = ImageResource(bundle: _R.hostingBundle, name: "line_")
    /// Image `loading1`.
    static let loading1 = ImageResource(bundle: _R.hostingBundle, name: "loading1")
    /// Image `loading2`.
    static let loading2 = ImageResource(bundle: _R.hostingBundle, name: "loading2")
    /// Image `loading3`.
    static let loading3 = ImageResource(bundle: _R.hostingBundle, name: "loading3")
    /// Image `loading4`.
    static let loading4 = ImageResource(bundle: _R.hostingBundle, name: "loading4")
    /// Image `loading5`.
    static let loading5 = ImageResource(bundle: _R.hostingBundle, name: "loading5")
    /// Image `loading6`.
    static let loading6 = ImageResource(bundle: _R.hostingBundle, name: "loading6")
    /// Image `loading7`.
    static let loading7 = ImageResource(bundle: _R.hostingBundle, name: "loading7")
    /// Image `main_border`.
    static let main_border = ImageResource(bundle: _R.hostingBundle, name: "main_border")
    /// Image `modify_verify_lump`.
    static let modify_verify_lump = ImageResource(bundle: _R.hostingBundle, name: "modify_verify_lump")
    /// Image `password_blue_btn`.
    static let password_blue_btn = ImageResource(bundle: _R.hostingBundle, name: "password_blue_btn")
    /// Image `password_blue_btn_01`.
    static let password_blue_btn_01 = ImageResource(bundle: _R.hostingBundle, name: "password_blue_btn_01")
    /// Image `password_white_btn`.
    static let password_white_btn = ImageResource(bundle: _R.hostingBundle, name: "password_white_btn")
    /// Image `progress_activity`.
    static let progress_activity = ImageResource(bundle: _R.hostingBundle, name: "progress_activity")
    /// Image `progress_circular`.
    static let progress_circular = ImageResource(bundle: _R.hostingBundle, name: "progress_circular")
    /// Image `qidongbeijing`.
    static let qidongbeijing = ImageResource(bundle: _R.hostingBundle, name: "qidongbeijing")
    /// Image `signup_btn_line_down`.
    static let signup_btn_line_down = ImageResource(bundle: _R.hostingBundle, name: "signup_btn_line_down")
    /// Image `signup_btn_line_nor`.
    static let signup_btn_line_nor = ImageResource(bundle: _R.hostingBundle, name: "signup_btn_line_nor")
    /// Image `signup_line_btn_down`.
    static let signup_line_btn_down = ImageResource(bundle: _R.hostingBundle, name: "signup_line_btn_down")
    /// Image `signup_line_btn_nor`.
    static let signup_line_btn_nor = ImageResource(bundle: _R.hostingBundle, name: "signup_line_btn_nor")
    /// Image `signup_logo`.
    static let signup_logo = ImageResource(bundle: _R.hostingBundle, name: "signup_logo")
    /// Image `simple_logo`.
    static let simple_logo = ImageResource(bundle: _R.hostingBundle, name: "simple_logo")
    /// Image `text_logo`.
    static let text_logo = ImageResource(bundle: _R.hostingBundle, name: "text_logo")
    /// Image `transparent_bg`.
    static let transparent_bg = ImageResource(bundle: _R.hostingBundle, name: "transparent_bg")
    /// Image `user_bg`.
    static let user_bg = ImageResource(bundle: _R.hostingBundle, name: "user_bg")
    /// Image `user_bnt_arrow_white_nor`.
    static let user_bnt_arrow_white_nor = ImageResource(bundle: _R.hostingBundle, name: "user_bnt_arrow_white_nor")
    /// Image `user_bnt_arrow_white_sel`.
    static let user_bnt_arrow_white_sel = ImageResource(bundle: _R.hostingBundle, name: "user_bnt_arrow_white_sel")
    /// Image `user_head`.
    static let user_head = ImageResource(bundle: _R.hostingBundle, name: "user_head")
    /// Image `user_icon_about`.
    static let user_icon_about = ImageResource(bundle: _R.hostingBundle, name: "user_icon_about")
    /// Image `user_icon_ca`.
    static let user_icon_ca = ImageResource(bundle: _R.hostingBundle, name: "user_icon_ca")
    /// Image `user_icon_feedback`.
    static let user_icon_feedback = ImageResource(bundle: _R.hostingBundle, name: "user_icon_feedback")
    /// Image `user_icon_hand`.
    static let user_icon_hand = ImageResource(bundle: _R.hostingBundle, name: "user_icon_hand")
    /// Image `user_icon_matching`.
    static let user_icon_matching = ImageResource(bundle: _R.hostingBundle, name: "user_icon_matching")
    /// Image `user_icon_password`.
    static let user_icon_password = ImageResource(bundle: _R.hostingBundle, name: "user_icon_password")
    /// Image `user_icon_user`.
    static let user_icon_user = ImageResource(bundle: _R.hostingBundle, name: "user_icon_user")
    /// Image `user_icon_user-1`.
    static let user_icon_user1 = ImageResource(bundle: _R.hostingBundle, name: "user_icon_user-1")
    /// Image `user_img_01`.
    static let user_img_01 = ImageResource(bundle: _R.hostingBundle, name: "user_img_01")
    /// Image `user_img_02`.
    static let user_img_02 = ImageResource(bundle: _R.hostingBundle, name: "user_img_02")
    /// Image `user_line`.
    static let user_line = ImageResource(bundle: _R.hostingBundle, name: "user_line")
    /// Image `user_title_bg`.
    static let user_title_bg = ImageResource(bundle: _R.hostingBundle, name: "user_title_bg")
    /// Image `user_title_logo`.
    static let user_title_logo = ImageResource(bundle: _R.hostingBundle, name: "user_title_logo")
    
    /// `UIImage(named: "bg5", bundle: ..., traitCollection: ...)`
    static func bg5(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.bg5, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "border_", bundle: ..., traitCollection: ...)`
    static func border_(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.border_, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_back_blue_nor", bundle: ..., traitCollection: ...)`
    static func btn_back_blue_nor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_back_blue_nor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_back_blue_sel", bundle: ..., traitCollection: ...)`
    static func btn_back_blue_sel(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_back_blue_sel, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_back_white_nor", bundle: ..., traitCollection: ...)`
    static func btn_back_white_nor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_back_white_nor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_back_white_sel", bundle: ..., traitCollection: ...)`
    static func btn_back_white_sel(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_back_white_sel, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_bg_fill_down", bundle: ..., traitCollection: ...)`
    static func btn_bg_fill_down(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_bg_fill_down, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_bg_fill_nor", bundle: ..., traitCollection: ...)`
    static func btn_bg_fill_nor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_bg_fill_nor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_blue_delete_down", bundle: ..., traitCollection: ...)`
    static func btn_blue_delete_down(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_blue_delete_down, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_blue_delete_nor", bundle: ..., traitCollection: ...)`
    static func btn_blue_delete_nor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_blue_delete_nor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_line", bundle: ..., traitCollection: ...)`
    static func btn_line(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_line, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_line_down", bundle: ..., traitCollection: ...)`
    static func btn_line_down(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_line_down, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_user_blue_multset_down", bundle: ..., traitCollection: ...)`
    static func btn_user_blue_multset_down(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_user_blue_multset_down, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "btn_user_blue_multset_nor", bundle: ..., traitCollection: ...)`
    static func btn_user_blue_multset_nor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.btn_user_blue_multset_nor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_blue_bg_down", bundle: ..., traitCollection: ...)`
    static func button_blue_bg_down(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_blue_bg_down, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "button_blue_bg_normal", bundle: ..., traitCollection: ...)`
    static func button_blue_bg_normal(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.button_blue_bg_normal, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "car", bundle: ..., traitCollection: ...)`
    static func car(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.car, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "center_ico_", bundle: ..., traitCollection: ...)`
    static func center_ico_(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.center_ico_, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "cesu_ico_down", bundle: ..., traitCollection: ...)`
    static func cesu_ico_down(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cesu_ico_down, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "cesu_ico_nor", bundle: ..., traitCollection: ...)`
    static func cesu_ico_nor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cesu_ico_nor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "checkmark", bundle: ..., traitCollection: ...)`
    static func checkmark(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.checkmark, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "cross", bundle: ..., traitCollection: ...)`
    static func cross(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cross, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "fangdao_ico_down", bundle: ..., traitCollection: ...)`
    static func fangdao_ico_down(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.fangdao_ico_down, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "fangdao_ico_nor", bundle: ..., traitCollection: ...)`
    static func fangdao_ico_nor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.fangdao_ico_nor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "fangjie_ico_down", bundle: ..., traitCollection: ...)`
    static func fangjie_ico_down(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.fangjie_ico_down, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "fangjie_ico_nor", bundle: ..., traitCollection: ...)`
    static func fangjie_ico_nor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.fangjie_ico_nor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "guide1", bundle: ..., traitCollection: ...)`
    static func guide1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.guide1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "guide2", bundle: ..., traitCollection: ...)`
    static func guide2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.guide2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "guide3", bundle: ..., traitCollection: ...)`
    static func guide3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.guide3, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "guide4", bundle: ..., traitCollection: ...)`
    static func guide4(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.guide4, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "guide4_2", bundle: ..., traitCollection: ...)`
    static func guide4_2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.guide4_2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "jiashi_ico_down", bundle: ..., traitCollection: ...)`
    static func jiashi_ico_down(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.jiashi_ico_down, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "jiashi_ico_nor", bundle: ..., traitCollection: ...)`
    static func jiashi_ico_nor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.jiashi_ico_nor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "launcher", bundle: ..., traitCollection: ...)`
    static func launcher(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.launcher, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "line_", bundle: ..., traitCollection: ...)`
    static func line_(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.line_, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "loading1", bundle: ..., traitCollection: ...)`
    static func loading1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.loading1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "loading2", bundle: ..., traitCollection: ...)`
    static func loading2(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.loading2, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "loading3", bundle: ..., traitCollection: ...)`
    static func loading3(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.loading3, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "loading4", bundle: ..., traitCollection: ...)`
    static func loading4(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.loading4, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "loading5", bundle: ..., traitCollection: ...)`
    static func loading5(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.loading5, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "loading6", bundle: ..., traitCollection: ...)`
    static func loading6(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.loading6, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "loading7", bundle: ..., traitCollection: ...)`
    static func loading7(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.loading7, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "main_border", bundle: ..., traitCollection: ...)`
    static func main_border(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.main_border, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "modify_verify_lump", bundle: ..., traitCollection: ...)`
    static func modify_verify_lump(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.modify_verify_lump, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "password_blue_btn", bundle: ..., traitCollection: ...)`
    static func password_blue_btn(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.password_blue_btn, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "password_blue_btn_01", bundle: ..., traitCollection: ...)`
    static func password_blue_btn_01(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.password_blue_btn_01, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "password_white_btn", bundle: ..., traitCollection: ...)`
    static func password_white_btn(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.password_white_btn, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "progress_activity", bundle: ..., traitCollection: ...)`
    static func progress_activity(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.progress_activity, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "progress_circular", bundle: ..., traitCollection: ...)`
    static func progress_circular(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.progress_circular, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "qidongbeijing", bundle: ..., traitCollection: ...)`
    static func qidongbeijing(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.qidongbeijing, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "signup_btn_line_down", bundle: ..., traitCollection: ...)`
    static func signup_btn_line_down(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.signup_btn_line_down, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "signup_btn_line_nor", bundle: ..., traitCollection: ...)`
    static func signup_btn_line_nor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.signup_btn_line_nor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "signup_line_btn_down", bundle: ..., traitCollection: ...)`
    static func signup_line_btn_down(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.signup_line_btn_down, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "signup_line_btn_nor", bundle: ..., traitCollection: ...)`
    static func signup_line_btn_nor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.signup_line_btn_nor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "signup_logo", bundle: ..., traitCollection: ...)`
    static func signup_logo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.signup_logo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "simple_logo", bundle: ..., traitCollection: ...)`
    static func simple_logo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.simple_logo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "text_logo", bundle: ..., traitCollection: ...)`
    static func text_logo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.text_logo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "transparent_bg", bundle: ..., traitCollection: ...)`
    static func transparent_bg(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.transparent_bg, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user_bg", bundle: ..., traitCollection: ...)`
    static func user_bg(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user_bg, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user_bnt_arrow_white_nor", bundle: ..., traitCollection: ...)`
    static func user_bnt_arrow_white_nor(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user_bnt_arrow_white_nor, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user_bnt_arrow_white_sel", bundle: ..., traitCollection: ...)`
    static func user_bnt_arrow_white_sel(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user_bnt_arrow_white_sel, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user_head", bundle: ..., traitCollection: ...)`
    static func user_head(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user_head, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user_icon_about", bundle: ..., traitCollection: ...)`
    static func user_icon_about(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user_icon_about, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user_icon_ca", bundle: ..., traitCollection: ...)`
    static func user_icon_ca(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user_icon_ca, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user_icon_feedback", bundle: ..., traitCollection: ...)`
    static func user_icon_feedback(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user_icon_feedback, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user_icon_hand", bundle: ..., traitCollection: ...)`
    static func user_icon_hand(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user_icon_hand, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user_icon_matching", bundle: ..., traitCollection: ...)`
    static func user_icon_matching(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user_icon_matching, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user_icon_password", bundle: ..., traitCollection: ...)`
    static func user_icon_password(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user_icon_password, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user_icon_user", bundle: ..., traitCollection: ...)`
    static func user_icon_user(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user_icon_user, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user_icon_user-1", bundle: ..., traitCollection: ...)`
    static func user_icon_user1(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user_icon_user1, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user_img_01", bundle: ..., traitCollection: ...)`
    static func user_img_01(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user_img_01, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user_img_02", bundle: ..., traitCollection: ...)`
    static func user_img_02(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user_img_02, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user_line", bundle: ..., traitCollection: ...)`
    static func user_line(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user_line, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user_title_bg", bundle: ..., traitCollection: ...)`
    static func user_title_bg(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user_title_bg, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "user_title_logo", bundle: ..., traitCollection: ...)`
    static func user_title_logo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.user_title_logo, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `BaseCell`.
    static let baseCell: ReuseIdentifier<BaseViewCell> = ReuseIdentifier(identifier: "BaseCell")
    /// Reuse identifier `TelCell`.
    static let telCell: ReuseIdentifier<TelViewCell> = ReuseIdentifier(identifier: "TelCell")
    
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `RegisterViewController`, and contains static references to 1 segues.
    struct registerViewController {
      /// Segue identifier `RegisterNext`.
      static let registerNext: StoryboardSegueIdentifier<UIStoryboardSegue, RegisterViewController, RegisterNextViewController> = StoryboardSegueIdentifier(identifier: "RegisterNext")
      
      /// Optionally returns a typed version of segue `RegisterNext`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func registerNext(segue segue: UIStoryboardSegue) -> TypedStoryboardSegueInfo<UIStoryboardSegue, RegisterViewController, RegisterNextViewController>? {
        return TypedStoryboardSegueInfo(segueIdentifier: R.segue.registerViewController.registerNext, segue: segue)
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "com.angcyo.AIOwnDemo") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIImage(named: "guide2") == nil { throw ValidationError(description: "[R.swift] Image named 'guide2' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIImage(named: "launcher") == nil { throw ValidationError(description: "[R.swift] Image named 'launcher' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NavMainViewController
      
      let bundle = _R.hostingBundle
      let guide1ID = StoryboardViewControllerResource<UIViewController>(identifier: "Guide1ID")
      let guide2ID = StoryboardViewControllerResource<UIViewController>(identifier: "Guide2ID")
      let guide3ID = StoryboardViewControllerResource<UIViewController>(identifier: "Guide3ID")
      let guide4ID = StoryboardViewControllerResource<LastViewController>(identifier: "Guide4ID")
      let guideStoryboardID = StoryboardViewControllerResource<Guide2PageViewcontroller>(identifier: "GuideStoryboardID")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let mainViewControllerID = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewControllerID")
      let name = "Main"
      let registerViewController = StoryboardViewControllerResource<RegisterViewController>(identifier: "RegisterViewController")
      
      func guide1ID(_: Void) -> UIViewController? {
        return UIStoryboard(resource: self).instantiateViewController(guide1ID)
      }
      
      func guide2ID(_: Void) -> UIViewController? {
        return UIStoryboard(resource: self).instantiateViewController(guide2ID)
      }
      
      func guide3ID(_: Void) -> UIViewController? {
        return UIStoryboard(resource: self).instantiateViewController(guide3ID)
      }
      
      func guide4ID(_: Void) -> LastViewController? {
        return UIStoryboard(resource: self).instantiateViewController(guide4ID)
      }
      
      func guideStoryboardID(_: Void) -> Guide2PageViewcontroller? {
        return UIStoryboard(resource: self).instantiateViewController(guideStoryboardID)
      }
      
      func loginViewController(_: Void) -> LoginViewController? {
        return UIStoryboard(resource: self).instantiateViewController(loginViewController)
      }
      
      func mainViewControllerID(_: Void) -> MainViewController? {
        return UIStoryboard(resource: self).instantiateViewController(mainViewControllerID)
      }
      
      func registerViewController(_: Void) -> RegisterViewController? {
        return UIStoryboard(resource: self).instantiateViewController(registerViewController)
      }
      
      static func validate() throws {
        if UIImage(named: "border_") == nil { throw ValidationError(description: "[R.swift] Image named 'border_' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "user_icon_user") == nil { throw ValidationError(description: "[R.swift] Image named 'user_icon_user' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "user_bg") == nil { throw ValidationError(description: "[R.swift] Image named 'user_bg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "fangdao_ico_down") == nil { throw ValidationError(description: "[R.swift] Image named 'fangdao_ico_down' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "cesu_ico_nor") == nil { throw ValidationError(description: "[R.swift] Image named 'cesu_ico_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "signup_btn_line_down") == nil { throw ValidationError(description: "[R.swift] Image named 'signup_btn_line_down' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "cesu_ico_down") == nil { throw ValidationError(description: "[R.swift] Image named 'cesu_ico_down' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "jiashi_ico_nor") == nil { throw ValidationError(description: "[R.swift] Image named 'jiashi_ico_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "fangjie_ico_nor") == nil { throw ValidationError(description: "[R.swift] Image named 'fangjie_ico_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "guide3") == nil { throw ValidationError(description: "[R.swift] Image named 'guide3' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "guide4_2") == nil { throw ValidationError(description: "[R.swift] Image named 'guide4_2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "signup_btn_line_nor") == nil { throw ValidationError(description: "[R.swift] Image named 'signup_btn_line_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "signup_line_btn_nor") == nil { throw ValidationError(description: "[R.swift] Image named 'signup_line_btn_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "fangdao_ico_nor") == nil { throw ValidationError(description: "[R.swift] Image named 'fangdao_ico_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "jiashi_ico_down") == nil { throw ValidationError(description: "[R.swift] Image named 'jiashi_ico_down' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "button_blue_bg_down") == nil { throw ValidationError(description: "[R.swift] Image named 'button_blue_bg_down' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "btn_bg_fill_nor") == nil { throw ValidationError(description: "[R.swift] Image named 'btn_bg_fill_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "user_title_logo") == nil { throw ValidationError(description: "[R.swift] Image named 'user_title_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "signup_logo") == nil { throw ValidationError(description: "[R.swift] Image named 'signup_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "user_icon_about") == nil { throw ValidationError(description: "[R.swift] Image named 'user_icon_about' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "btn_back_blue_nor") == nil { throw ValidationError(description: "[R.swift] Image named 'btn_back_blue_nor' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "guide2") == nil { throw ValidationError(description: "[R.swift] Image named 'guide2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "main_border") == nil { throw ValidationError(description: "[R.swift] Image named 'main_border' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "btn_bg_fill_down") == nil { throw ValidationError(description: "[R.swift] Image named 'btn_bg_fill_down' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "user_img_01") == nil { throw ValidationError(description: "[R.swift] Image named 'user_img_01' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "car") == nil { throw ValidationError(description: "[R.swift] Image named 'car' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "transparent_bg") == nil { throw ValidationError(description: "[R.swift] Image named 'transparent_bg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "text_logo") == nil { throw ValidationError(description: "[R.swift] Image named 'text_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "signup_line_btn_down") == nil { throw ValidationError(description: "[R.swift] Image named 'signup_line_btn_down' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "fangjie_ico_down") == nil { throw ValidationError(description: "[R.swift] Image named 'fangjie_ico_down' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "line_") == nil { throw ValidationError(description: "[R.swift] Image named 'line_' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "user_bnt_arrow_white_sel") == nil { throw ValidationError(description: "[R.swift] Image named 'user_bnt_arrow_white_sel' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "center_ico_") == nil { throw ValidationError(description: "[R.swift] Image named 'center_ico_' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "guide1") == nil { throw ValidationError(description: "[R.swift] Image named 'guide1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "launcher") == nil { throw ValidationError(description: "[R.swift] Image named 'launcher' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIImage(named: "button_blue_bg_normal") == nil { throw ValidationError(description: "[R.swift] Image named 'button_blue_bg_normal' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().guide1ID() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'guide1ID' could not be loaded from storyboard 'Main' as 'UIViewController'.") }
        if _R.storyboard.main().guideStoryboardID() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'guideStoryboardID' could not be loaded from storyboard 'Main' as 'Guide2PageViewcontroller'.") }
        if _R.storyboard.main().loginViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Main' as 'LoginViewController'.") }
        if _R.storyboard.main().registerViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'registerViewController' could not be loaded from storyboard 'Main' as 'RegisterViewController'.") }
        if _R.storyboard.main().guide2ID() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'guide2ID' could not be loaded from storyboard 'Main' as 'UIViewController'.") }
        if _R.storyboard.main().guide3ID() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'guide3ID' could not be loaded from storyboard 'Main' as 'UIViewController'.") }
        if _R.storyboard.main().guide4ID() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'guide4ID' could not be loaded from storyboard 'Main' as 'LastViewController'.") }
        if _R.storyboard.main().mainViewControllerID() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'mainViewControllerID' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}